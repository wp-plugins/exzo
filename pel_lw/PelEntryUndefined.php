<?php require_once('PelEntry.php'); class PelEntryUndefined extends PelEntry { function __construct($tag, $data = '') { $this->tag = $tag; $this->format = PelFormat::UNDEFINED; $this->setValue($data); } function setValue($data) { $this->components = strlen($data); $this->bytes = $data; } function getValue() { return $this->bytes; } function getText($brief = false) { switch ($this->tag) { case PelTag::FILE_SOURCE: switch (ord($this->bytes{0})) { case 0x03: return 'DSC'; default: return sprintf('0x%02X', ord($this->bytes{0})); } case PelTag::SCENE_TYPE: switch (ord($this->bytes{0})) { case 0x01: return 'Directly photographed'; default: return sprintf('0x%02X', ord($this->bytes{0})); } case PelTag::COMPONENTS_CONFIGURATION: $v = ''; for ($i = 0; $i < 4; $i++) { switch (ord($this->bytes{$i})) { case 0: $v .= '-'; break; case 1: $v .= 'Y'; break; case 2: $v .= 'Cb'; break; case 3: $v .= 'Cr'; break; case 4: $v .= 'R'; break; case 5: $v .= 'G'; break; case 6: $v .= 'B'; break; default: $v .= 'reserved'; break; } if ($i < 3) $v .= ' '; } return $v; case PelTag::MAKER_NOTE: return $this->components . ' bytes unknown MakerNote data'; default: return '(undefined)'; } } } class PelEntryUserComment extends PelEntryUndefined { private $comment; private $encoding; function __construct($comment = '', $encoding = 'ASCII') { parent::__construct(PelTag::USER_COMMENT); $this->setValue($comment, $encoding); } function setValue($comment = '', $encoding = 'ASCII') { $this->comment = $comment; $this->encoding = $encoding; parent::setValue(str_pad($encoding, 8, chr(0)) . $comment); } function getValue() { return $this->comment; } function getEncoding() { return $this->encoding; } function getText($brief = false) { return $this->comment; } } class PelEntryVersion extends PelEntryUndefined { private $version; function __construct($tag, $version = 0.0) { parent::__construct($tag); $this->setValue($version); } function setValue($version = 0.0) { $this->version = $version; $major = floor($version); $minor = ($version - $major)*100; parent::setValue(sprintf('%02.0f%02.0f', $major, $minor)); } function getValue() { return $this->version; } function getText($brief = false) { $v = $this->version; if (floor($this->version) == $this->version) $v .= '.0'; switch ($this->tag) { case PelTag::EXIF_VERSION: if ($brief) return Pel::fmt('Exif %s', $v); else return Pel::fmt('Exif Version %s', $v); case PelTag::FLASH_PIX_VERSION: if ($brief) return Pel::fmt('FlashPix %s', $v); else return Pel::fmt('FlashPix Version %s', $v); case PelTag::INTEROPERABILITY_VERSION: if ($brief) return Pel::fmt('Interoperability %s', $v); else return Pel::fmt('Interoperability Version %s', $v); } if ($brief) return $v; else return Pel::fmt('Version %s', $v); } } ?>