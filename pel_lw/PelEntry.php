<?php require_once('PelException.php'); require_once('PelFormat.php'); require_once('PelTag.php'); require_once('Pel.php'); class PelEntryException extends PelException { protected $type; protected $tag; function getIfdType() { return $this->type; } function getTag() { return $this->tag; } } class PelUnexpectedFormatException extends PelEntryException { function __construct($type, $tag, $found, $expected) { parent::__construct('Unexpected format found for %s tag: PelFormat::%s. ' . 'Expected PelFormat::%s instead.', PelTag::getName($type, $tag), strtoupper(PelFormat::getName($found)), strtoupper(PelFormat::getName($expected))); $this->tag = $tag; $this->type = $type; } } class PelWrongComponentCountException extends PelEntryException { function __construct($type, $tag, $found, $expected) { parent::__construct('Wrong number of components found for %s tag: %d. ' . 'Expected %d.', PelTag::getName($type, $tag), $found, $expected); $this->tag = $tag; $this->type = $type; } } abstract class PelEntry { protected $ifd_type; protected $bytes = ''; protected $tag; protected $format; protected $components; function getTag() { return $this->tag; } function getIfdType() { return $this->ifd_type; } function setIfdType($type) { $this->ifd_type = $type; } function getFormat() { return $this->format; } function getComponents() { return $this->components; } function getBytes($o) { return $this->bytes; } abstract function getText($brief = false); abstract function getValue(); function setValue($value) { throw new PelException('setValue() is abstract.'); } function __toString() { $str = Pel::fmt("  Tag: 0x%04X (%s)\n", $this->tag, PelTag::getName($this->ifd_type, $this->tag)); $str .= Pel::fmt("    Format    : %d (%s)\n", $this->format, PelFormat::getName($this->format)); $str .= Pel::fmt("    Components: %d\n", $this->components); if ($this->getTag() != PelTag::MAKER_NOTE && $this->getTag() != PelTag::PRINT_IM) $str .= Pel::fmt("    Value     : %s\n", print_r($this->getValue(), true)); $str .= Pel::fmt("    Text      : %s\n", $this->getText()); return $str; } } ?>