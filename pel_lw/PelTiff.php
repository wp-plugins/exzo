<?php require_once('PelDataWindow.php'); require_once('PelIfd.php'); require_once('Pel.php'); class PelTiff { const TIFF_HEADER = 0x002A; private $ifd = null; function __construct($data = false) { if ($data === false) return; if (is_string($data)) { Pel::debug('Initializing PelTiff object from %s', $data); $this->loadFile($data); } elseif ($data instanceof PelDataWindow) { Pel::debug('Initializing PelTiff object from PelDataWindow.'); $this->load($data); } else { throw new PelInvalidArgumentException('Bad type for $data: %s', gettype($data)); } } function load(PelDataWindow $d) { Pel::debug('Parsing %d bytes of TIFF data...', $d->getSize()); if ($d->getSize() < 8) throw new PelInvalidDataException('Expected at least 8 bytes of TIFF ' . 'data, found just %d bytes.', $d->getSize()); if ($d->strcmp(0, 'II')) { Pel::debug('Found Intel byte order'); $d->setByteOrder(PelConvert::LITTLE_ENDIAN); } elseif ($d->strcmp(0, 'MM')) { Pel::debug('Found Motorola byte order'); $d->setByteOrder(PelConvert::BIG_ENDIAN); } else { throw new PelInvalidDataException('Unknown byte order found in TIFF ' . 'data: 0x%2X%2X', $d->getByte(0), $d->getByte(1)); } if ($d->getShort(2) != self::TIFF_HEADER) throw new PelInvalidDataException('Missing TIFF magic value.'); $offset = $d->getLong(4); Pel::debug('First IFD at offset %d.', $offset); if ($offset > 0) { $this->ifd = new PelIfd(PelIfd::IFD0); $this->ifd->load($d, $offset); } } function loadFile($filename) { $this->load(new PelDataWindow(file_get_contents($filename))); } function setIfd(PelIfd $ifd) { if ($ifd->getType() != PelIfd::IFD0) throw new PelInvalidDataException('Invalid type of IFD: %d, expected %d.', $ifd->getType(), PelIfd::IFD0); $this->ifd = $ifd; } function getIfd() { return $this->ifd; } function getBytes($order = PelConvert::LITTLE_ENDIAN) { if ($order == PelConvert::LITTLE_ENDIAN) $bytes = 'II'; else $bytes = 'MM'; $bytes .= PelConvert::shortToBytes(self::TIFF_HEADER, $order); if ($this->ifd != null) { $bytes .= PelConvert::longToBytes(8, $order); $bytes .= $this->ifd->getBytes(8, $order); } else { $bytes .= PelConvert::longToBytes(0, $order); } return $bytes; } function __toString() { $str = Pel::fmt("Dumping TIFF data...\n"); if ($this->ifd != null) $str .= $this->ifd->__toString(); return $str; } static function isValid(PelDataWindow $d) { if ($d->getSize() < 8) return false; if ($d->strcmp(0, 'II')) { $d->setByteOrder(PelConvert::LITTLE_ENDIAN); } elseif ($d->strcmp(0, 'MM')) { Pel::debug('Found Motorola byte order'); $d->setByteOrder(PelConvert::BIG_ENDIAN); } else { return false; } return $d->getShort(2) == self::TIFF_HEADER; } }