<?php class PelConvert { const LITTLE_ENDIAN = true; const BIG_ENDIAN = false; static function shortToBytes($value, $endian) { if ($endian == self::LITTLE_ENDIAN) return chr($value) . chr($value >> 8); else return chr($value >> 8) . chr($value); } static function sShortToBytes($value, $endian) { return self::shortToBytes($value, $endian); } static function longToBytes($value, $endian) { $hex = str_pad(base_convert($value, 10, 16), 8, '0', STR_PAD_LEFT); if ($endian == self::LITTLE_ENDIAN) return (chr(hexdec($hex{6} . $hex{7})) . chr(hexdec($hex{4} . $hex{5})) . chr(hexdec($hex{2} . $hex{3})) . chr(hexdec($hex{0} . $hex{1}))); else return (chr(hexdec($hex{0} . $hex{1})) . chr(hexdec($hex{2} . $hex{3})) . chr(hexdec($hex{4} . $hex{5})) . chr(hexdec($hex{6} . $hex{7}))); } static function sLongToBytes($value, $endian) { if ($endian == self::LITTLE_ENDIAN) return (chr($value) . chr($value >> 8) . chr($value >> 16) . chr($value >> 24)); else return (chr($value >> 24) . chr($value >> 16) . chr($value >> 8) . chr($value)); } static function bytesToByte($bytes, $offset) { return ord($bytes{$offset}); } static function bytesToSByte($bytes, $offset) { $n = self::bytesToByte($bytes, $offset); if ($n > 127) return $n - 256; else return $n; } static function bytesToShort($bytes, $offset, $endian) { if ($endian == self::LITTLE_ENDIAN) return (ord($bytes{$offset+1}) * 256 + ord($bytes{$offset})); else return (ord($bytes{$offset}) * 256 + ord($bytes{$offset+1})); } static function bytesToSShort($bytes, $offset, $endian) { $n = self::bytesToShort($bytes, $offset, $endian); if ($n > 32767) return $n - 65536; else return $n; } static function bytesToLong($bytes, $offset, $endian) { if ($endian == self::LITTLE_ENDIAN) return (ord($bytes{$offset+3}) * 16777216 + ord($bytes{$offset+2}) * 65536 + ord($bytes{$offset+1}) * 256 + ord($bytes{$offset})); else return (ord($bytes{$offset}) * 16777216 + ord($bytes{$offset+1}) * 65536 + ord($bytes{$offset+2}) * 256 + ord($bytes{$offset+3})); } static function bytesToSLong($bytes, $offset, $endian) { $n = self::bytesToLong($bytes, $offset, $endian); if ($n > 2147483647) return $n - 4294967296; else return $n; } static function bytesToRational($bytes, $offset, $endian) { return array(self::bytesToLong($bytes, $offset, $endian), self::bytesToLong($bytes, $offset+4, $endian)); } static function bytesToSRational($bytes, $offset, $endian) { return array(self::bytesToSLong($bytes, $offset, $endian), self::bytesToSLong($bytes, $offset+4, $endian)); } static function bytesToDump($bytes, $max = 0) { $s = strlen($bytes); if ($max > 0) $s = min($max, $s); $line = 24; for ($i = 0; $i < $s; $i++) { printf('%02X ', ord($bytes{$i})); if (($i+1) % $line == 0) print("\n"); } print("\n"); } } ?>