<?php require_once('PelEntryLong.php'); class PelEntryRational extends PelEntryLong { function __construct($tag ) { $this->tag = $tag; $this->format = PelFormat::RATIONAL; $this->dimension = 2; $this->min = 0; $this->max = 4294967295; $value = func_get_args(); array_shift($value); $this->setValueArray($value); } function formatNumber($number, $brief = false) { return $number[0] . '/' . $number[1]; } function getText($brief = false) { if (isset($this->value[0])) $v = $this->value[0]; switch ($this->tag) { case PelTag::FNUMBER: return Pel::fmt('f/%.01f', $v[0]/$v[1]); case PelTag::APERTURE_VALUE: return Pel::fmt('f/%.01f', pow(2, $v[0]/$v[1]/2)); case PelTag::FOCAL_LENGTH: return Pel::fmt('%.1f mm', $v[0]/$v[1]); case PelTag::SUBJECT_DISTANCE: return Pel::fmt('%.1f m', $v[0]/$v[1]); case PelTag::EXPOSURE_TIME: if ($v[0]/$v[1] < 1) return Pel::fmt('1/%d sec.', $v[1]/$v[0]); else return Pel::fmt('%d sec.', $v[0]/$v[1]); case PelTag::GPS_LATITUDE: case PelTag::GPS_LONGITUDE: $degrees = $this->value[0][0]/$this->value[0][1]; $minutes = $this->value[1][0]/$this->value[1][1]; $seconds = $this->value[2][0]/$this->value[2][1]; return sprintf('%s° %s\' %s" (%.2f°)', $degrees, $minutes, $seconds, $degrees + $minutes/60 + $seconds/3600); default: return parent::getText($brief); } } } class PelEntrySRational extends PelEntrySLong { function __construct($tag ) { $this->tag = $tag; $this->format = PelFormat::SRATIONAL; $this->dimension = 2; $this->min = -2147483648; $this->max = 2147483647; $value = func_get_args(); array_shift($value); $this->setValueArray($value); } function formatNumber($number, $brief = false) { if ($number[1] < 0) return (-$number[0]) . '/' . (-$number[1]); else return $number[0] . '/' . $number[1]; } function getText($brief = false) { if (isset($this->value[0])) $v = $this->value[0]; switch ($this->tag) { case PelTag::SHUTTER_SPEED_VALUE: return Pel::fmt('%.0f/%.0f sec. (APEX: %d)', $v[0], $v[1], pow(sqrt(2), $v[0]/$v[1])); case PelTag::BRIGHTNESS_VALUE: return sprintf('%d/%d', $v[0], $v[1]); case PelTag::EXPOSURE_BIAS_VALUE: return sprintf('%s%.01f', $v[0]*$v[1] > 0 ? '+' : '', $v[0]/$v[1]); default: return parent::getText($brief); } } } ?>